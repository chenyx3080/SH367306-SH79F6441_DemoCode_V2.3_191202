C51 COMPILER V9.00   RTC                                                                   12/09/2019 17:56:08 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE RTC
OBJECT MODULE PLACED IN .\output\RTC.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code\RTC.c LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(.\header) DEBUG OBJECTE
                    -XTEND PRINT(.\output\RTC.lst) OBJECT(.\output\RTC.obj)

line level    source

   1          /********************************************************************************
   2          Copyright (C), Sinowealth Electronic. Ltd.
   3          Author:         Sino
   4          Version:        V0.0
   5          Date:           2014/05/30
   6          History:
   7                  V0.0            2014/08/28               Preliminary
   8          ********************************************************************************/
   9          #include "System.h"
  10          #include "ExtE2PRomRTC.h"
  11          
  12          
  13          /*******************************************************************************
  14          Function: RTCWrite(U8 WrAddr, U8 Length, U8 xdata *WrBuf)
  15          Description: 
  16          Input: 
  17          Output: 
  18          Others:
  19          ********************************************************************************/
  20          bit RTCWrite(U8 WrAddr, U8 Length, U8 xdata *WrBuf)
  21          {
  22   1              BOOL result=1;
  23   1      
  24   1              if(!TwiWrite(RTC_ID, WrAddr, Length, WrBuf))
  25   1              {
  26   2                      result = TwiWrite(RTC_ID, WrAddr, Length, WrBuf);
  27   2              }
  28   1      
  29   1              return result;
  30   1      }
  31          
  32          
  33          /*******************************************************************************
  34          Function: RTCRead(U8 RdAddr, U8 Length, U8 xdata *RdBuf)
  35          Description: 
  36          Input: 
  37          Output: 
  38          Others:
  39          ********************************************************************************/
  40          bit RTCRead(U8 RdAddr, U8 Length, U8 xdata *RdBuf)
  41          {
  42   1              BOOL result=1;
  43   1              
  44   1              if(!TwiRead(RTC_ID, RdAddr, Length, RdBuf))
  45   1              {
  46   2                      result = TwiRead(RTC_ID, RdAddr, Length, RdBuf);
  47   2              }
  48   1      
  49   1              return result;
  50   1      }
  51          
  52          
  53          /*******************************************************************************
  54          Function: RTCReadTime(void)
C51 COMPILER V9.00   RTC                                                                   12/09/2019 17:56:08 PAGE 2   

  55          Description: 
  56          Input: 
  57          Output: 
  58          Others:
  59          ********************************************************************************/
  60          bit RTCReadTime(void)
  61          {
  62   1              U8 xdata rtcbuf[9];
  63   1              BOOL result = 0;
  64   1              
  65   1              if(RTCRead(0x00, 9, &rtcbuf))
  66   1              {
  67   2                      if((rtcbuf[7]&0x01) == 0x00)                    //judge RTCF bit
  68   2                      {
  69   3                              RTC.Second = rtcbuf[0];
  70   3                              RTC.Minute = rtcbuf[1];
  71   3                              RTC.Hour = rtcbuf[2]&0x1F;
  72   3                              RTC.Date = rtcbuf[3];
  73   3                              RTC.Month = rtcbuf[4];
  74   3                              RTC.Year = rtcbuf[5];
  75   3                              RTC.Week = rtcbuf[6];
  76   3                              result = 1;
  77   3                      }
  78   2                      else
  79   2                      {
  80   3                              rtcbuf[0] = RTC.Second;
  81   3                              rtcbuf[1] = RTC.Minute;
  82   3                              rtcbuf[2] = RTC.Hour|0x80;
  83   3                              rtcbuf[3] = RTC.Date;
  84   3                              rtcbuf[4] = RTC.Month;
  85   3                              rtcbuf[5] = RTC.Year;
  86   3                              rtcbuf[6] = RTC.Week;
  87   3                              rtcbuf[7] = 0x90;
  88   3                              rtcbuf[8] = 0x00;
  89   3                              RTCWrite(0x00, 9, &rtcbuf);                     
  90   3                      }
  91   2              }
  92   1      
  93   1              return result;
  94   1      }
  95          
  96          
  97          /*******************************************************************************
  98          Function: RTCModifyTime()
  99          Description: modify RTC time, include year, month, date, week, hour, minute, second
 100          Input: RTC
 101          Output:
 102          ********************************************************************************/
 103          bit RTCModifyTime(void)
 104          {
 105   1              BOOL result = 0;
 106   1              U8 xdata rtcdata;
 107   1              U8 xdata rtctemp[7];
 108   1              
 109   1              rtcdata = 0x90;
 110   1              result = RTCWrite(RTC_REG_STATUS, 1, &rtcdata);
 111   1              
 112   1              rtctemp[0] = RTC.Second;
 113   1              rtctemp[1] = RTC.Minute;
 114   1              rtctemp[2] = RTC.Hour|0x80;
 115   1              rtctemp[3] = RTC.Date;
 116   1              rtctemp[4] = RTC.Month;
C51 COMPILER V9.00   RTC                                                                   12/09/2019 17:56:08 PAGE 3   

 117   1              rtctemp[5] = RTC.Year;
 118   1              rtctemp[6] = RTC.Week;                          
 119   1      
 120   1              result = RTCWrite(RTC_REG_SECOND, 7, (U8 xdata *)&rtctemp);
 121   1      
 122   1              return  result;
 123   1      }
 124          
 125          
 126          /*******************************************************************************
 127          Function: RTCInit()
 128          Description: init rtc hardware
 129          Input: Null
 130          Output: 
 131          Others:
 132          ********************************************************************************/
 133          void InitRTC(void)
 134          {
 135   1              U8 xdata rtcbuf[7];
 136   1              U8 i, checksum=0;
 137   1              U8 xdata rtcdata1;
 138   1              U8 xdata rtcbuf2[8];
 139   1          
 140   1              if(!bEnEEPRomBK)
 141   1          {
 142   2              bE2RTCON = 0;
 143   2          }
 144   1          else if(!bE2RTCON)
 145   1          {
 146   2              bE2RTCON = 1;
 147   2                      
 148   2                      MemorySet(rtcbuf, 0, sizeof(rtcbuf));           //clr rtcbuf[]
 149   2                      MemorySet(rtcbuf2, 0, sizeof(rtcbuf2));         //clr rtcbuf2[]
 150   2      
 151   2                      E2PRomRead(E2PROM_RTC_ADDR, 8, rtcbuf2);                //Read the backup RTC time in the EEPROM
 152   2                      for(i=0; i<6; i++)
 153   2                      {
 154   3                              checksum += rtcbuf2[i];
 155   3                      }
 156   2                      
 157   2                      if((rtcbuf2[6]!=checksum) || (rtcbuf2[7]!=0x5a))                        //If there is no RTC backup, set the default RTC Time
             -: 2015/03/06/12:00:00
 158   2                      {
 159   3                              rtcbuf[0] = 0x00;                       //second
 160   3                              rtcbuf[1] = 0x00;                       //minute
 161   3                              rtcbuf[2] = 0x12;                       //hour
 162   3                              rtcbuf[3] = 0x05;                       //week
 163   3                              rtcbuf[4] = 0x15;                       //date
 164   3                              rtcbuf[5] = 0x03;                       //month
 165   3                              rtcbuf[6] = 0x19;                       //year
 166   3                      }
 167   2                      else
 168   2                      {
 169   3                              rtcbuf[0] = rtcbuf2[0];         //second
 170   3                              rtcbuf[1] = rtcbuf2[1];         //minute
 171   3                              rtcbuf[2] = rtcbuf2[2];         //hour
 172   3                              rtcbuf[3] = 0x05;                       //week
 173   3                              rtcbuf[4] = rtcbuf2[3];         //date
 174   3                              rtcbuf[5] = rtcbuf2[4];         //month
 175   3                              rtcbuf[6] = rtcbuf2[5];         //year          
 176   3                      }
 177   2      
C51 COMPILER V9.00   RTC                                                                   12/09/2019 17:56:08 PAGE 4   

 178   2                      MemoryCopy(rtcbuf, (U8 xdata *)&RTC, 7);
 179   2      
 180   2                      rtcbuf[0] = RTC.Second;
 181   2                      rtcbuf[1] = RTC.Minute;
 182   2                      rtcbuf[2] = RTC.Hour|0x80;
 183   2                      rtcbuf[3] = RTC.Date;
 184   2                      rtcbuf[4] = RTC.Month;
 185   2                      rtcbuf[5] = RTC.Year;
 186   2                      rtcbuf[6] = RTC.Week;
 187   2      
 188   2                      rtcdata1 = 0x90;
 189   2                      RTCWrite(RTC_REG_STATUS, 1, &rtcdata1);
 190   2                      rtcdata1 = 0x01;
 191   2                      RTCWrite(RTC_REG_WEEK, 1, &rtcdata1);
 192   2      
 193   2                      if(RTCReadTime())
 194   2                      {
 195   3                              RTCWrite(0x00, 7, (U8 xdata *)&rtcbuf);
 196   3                      }
 197   2              }
 198   1      }
 199          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    715    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      42
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
