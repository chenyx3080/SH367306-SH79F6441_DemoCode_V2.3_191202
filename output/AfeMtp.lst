C51 COMPILER V9.00   AFEMTP                                                                12/09/2019 17:56:06 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE AFEMTP
OBJECT MODULE PLACED IN .\output\AfeMtp.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code\AfeMtp.c LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(.\header) DEBUG OBJE
                    -CTEXTEND PRINT(.\output\AfeMtp.lst) OBJECT(.\output\AfeMtp.obj)

line level    source

   1          /********************************************************************************
   2          Copyright (C), Sinowealth Electronic. Ltd.
   3          Author:         Sino
   4          Version:        V0.0
   5          Date:           2014/05/30
   6          History:
   7                  V0.0            2014/08/28               Preliminary
   8          ********************************************************************************/
   9          #include "System.h"
  10          
  11          
  12          /*******************************************************************************
  13          Function:TwiWriteAFE(U8 WrAddr, U8 xdata *WrBuf) 
  14          Description:  
  15          Input:          
  16          Output: 
  17          Others:
  18          *******************************************************************************/
  19          bit TwiWriteAFE(U8 WrAddr, U8 xdata *WrBuf)                                     //write only one byte once
  20          {
  21   1          BOOL result = 0;                                                    
  22   1          U8 times = 0;
  23   1      
  24   1          while(times++ < TRY_TIMES)
  25   1          {
  26   2                      result = TwiWrite(AFE_CHIP_ID, WrAddr, 1, WrBuf);
  27   2                      if(result)
  28   2                      {
  29   3                              break;
  30   3                      }
  31   2                      else
  32   2                      {
  33   3                              Delay1ms(1);
  34   3                      }
  35   2          }
  36   1          
  37   1          return  result;
  38   1      }
  39          
  40          
  41          /*******************************************************************************
  42          Function:TWIReadAFE(U8 RdAddr, U8 xdata *RdBuf) 
  43          Description:  
  44          Input:          
  45          Output: 
  46          Others:
  47          *******************************************************************************/
  48          bit TWIReadAFE(U8 RdAddr, U8 xdata *RdBuf)              //读AFE
  49          {
  50   1          BOOL result = 0;                                                    
  51   1          U8 times = 0;
  52   1      
  53   1          while(times++ < TRY_TIMES)                                  //如果读数出错，则Try 5次
  54   1          {
C51 COMPILER V9.00   AFEMTP                                                                12/09/2019 17:56:06 PAGE 2   

  55   2                      result = TwiRead(AFE_CHIP_ID, RdAddr, 2, RdBuf);        //读取数据长度固定为2Bytes
  56   2                      if(result)                                                              //如果读数成功且CRC校验正确，则退出循环返回成功标标志
  57   2                      {
  58   3                              break;
  59   3                      }
  60   2                      else                                                                    //如果TWI读数或CRC校验失败，则延时1mS之后再读取
  61   2                      {
  62   3                              Delay1ms(1);
  63   3                      }
  64   2          }
  65   1          
  66   1          return  result;
  67   1      }
  68          
  69          
  70          /*******************************************************************************
  71          Function:ClearAFEFlg(void) 
  72          Description:  
  73          Input:  NULL    
  74          Output: NULL
  75          Others:
  76          *******************************************************************************/
  77          void ClearAFEFlg(void)
  78          {
  79   1              TWIReadAFE(AFE_FLAG1, &REG.AFEFLAG1);           //read AFE FLAG1 search for which state  trigged ALARM
  80   1              if((REG.AFEFLAG1!=0) || (REG.AFEFLAG2!=0))                                                              
  81   1              {
  82   2              REG.AFESCONF1 |= 0x80;
  83   2              TwiWriteAFE(AFE_SCONF1, &REG.AFESCONF1);
  84   2              REG.AFESCONF1 &= ~0x80;
  85   2              TwiWriteAFE(AFE_SCONF1, &REG.AFESCONF1);
  86   2              }
  87   1      }
  88          
  89          
  90          /*******************************************************************************
  91          Function:InitAFE() 
  92          Description:  
  93          Input:  NULL    
  94          Output: NULL
  95          Others:
  96          *******************************************************************************/
  97          bit InitAFE(void)
  98          {
  99   1              U8 i;
 100   1              BOOL result=1;
 101   1      
 102   1              for(i=0; i<11; i++)
 103   1              {
 104   2                      if(!TwiWriteAFE(AFE_INT_EN+i, &REG.AFEINTEN+i))
 105   2                      {
 106   3                      result = 0;
 107   3                      break;
 108   3                      }
 109   2              }
 110   1      
 111   1              return result;
 112   1      }
 113          
 114          
 115          /*******************************************************************************
 116          Function:EnableAFEWdtCadc()  
C51 COMPILER V9.00   AFEMTP                                                                12/09/2019 17:56:06 PAGE 3   

 117          Description:使能CHG&DSG&PCHG输出，且使能WDT和CADC模块
 118          Input:  
 119          Output: 
 120          Others:
 121          *******************************************************************************/
 122          //void EnableAFEWdtCadc(void)
 123          //{
 124          //      ucMTPConfVal |= 0x7c;
 125          //      MTPWrite(MTP_CONF, 1, &ucMTPConfVal);
 126          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    253    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
