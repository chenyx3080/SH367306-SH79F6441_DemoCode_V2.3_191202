C51 COMPILER V9.00   CALCULATE                                                             12/09/2019 17:56:06 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE CALCULATE
OBJECT MODULE PLACED IN .\output\Calculate.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code\Calculate.c LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(.\header) DEBUG O
                    -BJECTEXTEND PRINT(.\output\Calculate.lst) OBJECT(.\output\Calculate.obj)

line level    source

   1          /********************************************************************************
   2          Copyright (C), Sinowealth Electronic. Ltd.
   3          Author:         Sino
   4          Version:        V0.0
   5          Date:           2014/05/30
   6          History:
   7                  V0.0            2014/05/30               Preliminary
   8          ********************************************************************************/
   9          #include "system.h"
  10          #include "Calibrate.h"
  11          
  12          
  13          /*******************************************************************************
  14          Function: U16 CalcuTemp(U16 getdata)
  15          Description:  Based on collected voltage ratio to calculate the corresponding temperature(-50~110)
  16          Input:          
  17          Output: 
  18          Others:
  19          *******************************************************************************/
  20          #define REF_RES_VAL     1000                            ////resistance 10K=1000*10,  The unit is 10 ohms
  21          U16     code NTC103AT[161]=                //this table  the temp corresponding to the (resistance value/10) of 103AT
  22          {
  23                  32950, 30970,29124,27404,25799,24770,23335,21995,20743,19572,18850, 17796, 16810, 15885, 15019,
  24                  14410, 13633, 12904, 12219, 11576, 11130, 10550, 10005, 9492, 9009,8643, 8208, 7798, 7412, 7048, 6777, 64
             -47, 6136,
  25                  5842, 5564, 5341, 5090, 4852, 4627, 4414, 4247, 4053, 3870, 3696, 3532,3390, 3241, 3099, 2964, 2836, 2728
             -, 2611,
  26                  2501, 2395, 2295, 2205, 2114, 2027, 1944, 1866, 1796, 1724, 1655, 1590, 1527,1469, 1412, 1357, 1305, 1256
             -, 1209,
  27                  1163, 1120, 1078, 1038, 1000, 963, 928, 894, 862, 831, 801, 772, 745, 719, 694, 670, 646, 624, 603,583, 5
             -62, 543,
  28                  525, 508, 491, 474, 459, 444, 430, 416, 402, 389, 377, 365, 354, 342, 331, 321, 311, 302, 292, 283, 275, 
             -267,259,
  29                  251, 243, 236, 229, 223, 216, 210, 204, 198, 192, 186, 181, 176, 171, 167, 162, 157, 153, 149, 145, 141, 
             -137, 133,
  30                  130, 127, 123, 120, 117, 114, 111, 108, 105, 102, 100, 97, 95, 92, 90, 88, 86, 83, 81, 79, 78, 76
  31          };
  32          U16 CalcuTemp(U16 getdata)
  33          {
  34   1              U8      i;
  35   1              U16     Temperature;
  36   1          U32 tempcalcu;
  37   1       
  38   1              tempcalcu= (U32)getdata*REF_RES_VAL/(4096-getdata);     //calculte the resistance value of 103AT
  39   1          if(tempcalcu > 10)
  40   1          {
  41   2              tempcalcu -= 10;
  42   2          }   
  43   1       
  44   1              if(tempcalcu >= NTC103AT[0])                               //look up table to find the resieter  correspond temp
  45   1              {
  46   2                      Temperature = 2731-500;                 
  47   2              }
  48   1              else if(tempcalcu <= NTC103AT[160])
C51 COMPILER V9.00   CALCULATE                                                             12/09/2019 17:56:06 PAGE 2   

  49   1              {
  50   2                      Temperature = 2731+1100;
  51   2              }
  52   1              else
  53   1              {
  54   2                      i = ucTempeMiddle;
  55   2                      if(tempcalcu > NTC103AT[i])
  56   2                      {
  57   3                              for(i=ucTempeMiddle-1; i>=0; i--)
  58   3                              {
  59   4                                      if(tempcalcu <= NTC103AT[i])                      //NTC103AT[i+1]<resis<NTC103AT[i]
  60   4                                      {
  61   5                                              break;
  62   5                                      }
  63   4                              }
  64   3                      }
  65   2                      else
  66   2                      {
  67   3                              for(i=ucTempeMiddle+1; i<160; i++)
  68   3                              {
  69   4                                      if(tempcalcu > NTC103AT[i])                           //NTC103AT[i-1]<resis<NTC103AT[i]
  70   4                                      {
  71   5                                              break;
  72   5                                      }
  73   4                              }
  74   3                              i--;
  75   3                      }
  76   2                      ucTempeMiddle = i;
  77   2                      
  78   2                      Temperature = (U16)(ucTempeMiddle-50)*10+(NTC103AT[i]-tempcalcu)*10/(NTC103AT[i]-NTC103AT[i+1])+2731;   
  79   2              }
  80   1              return Temperature;     
  81   1      }
  82          
  83          
  84          /*******************************************************************************
  85          Function: 
  86          Description:  
  87          Input:          
  88          Output: 
  89          Others:
  90          *******************************************************************************/
  91          void CalcuTemperature(void)
  92          {
  93   1          U16 TempeData;
  94   1      
  95   1          TempeData = CalcuTemp(AFE.uiTS1) + E2siTS1Offset;
  96   1          UART_IRQ_DISABLE;
  97   1          Info.uiTemp1 = TempeData;
  98   1          UART_IRQ_ENABLE;
  99   1      
 100   1          TempeData = (U32)AFE.uiICTemp1*1623/1000+71;                                //caculate ICTemp1              0.1623*TEMP-266
 101   1          UART_IRQ_DISABLE;
 102   1          Info.uiICTemp1 = TempeData;
 103   1          UART_IRQ_ENABLE;
 104   1        
 105   1          if(ucCellNum>5)                                                                                             //Cellmun>5 ic must be 306
 106   1          {    
 107   2              TempeData = (U32)AFE.uiICTemp2*1623/1000+71;                            //caculate ICTemp2              0.1623*TEMP-266
 108   2              UART_IRQ_DISABLE;
 109   2              Info.uiICTemp2 = TempeData;
 110   2              UART_IRQ_ENABLE;
C51 COMPILER V9.00   CALCULATE                                                             12/09/2019 17:56:06 PAGE 3   

 111   2          }
 112   1       
 113   1          uiTempeMin = Info.uiTemp1;
 114   1          uiTempeMax = Info.uiTemp1;
 115   1          if(bTempNum)                                                                                           //two tempe detect
 116   1          {
 117   2              TempeData = CalcuTemp(AFE.uiTS2) + E2siTS2Offset;
 118   2              UART_IRQ_DISABLE;
 119   2              Info.uiTemp2 = TempeData;
 120   2              UART_IRQ_ENABLE;
 121   2              
 122   2              if(TempeData < uiTempeMin)
 123   2              {
 124   3                  uiTempeMin = TempeData;
 125   3              }
 126   2              else
 127   2              {
 128   3                  uiTempeMax = TempeData;
 129   3              }
 130   2          }
 131   1      }
 132          
 133          
 134          /*******************************************************************************
 135          Function: 
 136          Description:  
 137          1. Calculate a single battery voltage
 138          2. Calculate the total voltage
 139          Input:          
 140          Output: 
 141          Others:
 142          *******************************************************************************/
 143          void CalcuVoltage(void)
 144          {
 145   1              U8 i;
 146   1              U32 TempPackVol=0, TempCellVol=0;
 147   1              uiVadcVmax = 0;                                   
 148   1              uiVadcVmin = 6000;
 149   1      
 150   1              for(i=ucCellNumOffset; i<(ucCellNum+ucCellNumOffset); i++)
 151   1              {
 152   2                      TempCellVol = (U32)AFE.uiCell[i]*CALIVOL/E2uiVPackGain;         //Calculate a single battery voltage
 153   2              
 154   2                      if(TempCellVol > uiVadcVmax)                                                            //计算最大值&最小值
 155   2                      {
 156   3                              uiVadcVmax = TempCellVol;       
 157   3                      }
 158   2                      if(TempCellVol < uiVadcVmin)
 159   2                      {
 160   3                              uiVadcVmin = TempCellVol;
 161   3                      }
 162   2      
 163   2              if(!bBalancingFlg)                                                                              //if bCellOpenDecFlag this data will throw away
 164   2              {
 165   3                      UART_IRQ_DISABLE;
 166   3                      Info.uiVCell[i] = TempCellVol;
 167   3                      UART_IRQ_ENABLE;
 168   3                      TempPackVol += TempCellVol;                                             
 169   3              }
 170   2              }
 171   1      
 172   1              if(!bBalancingFlg)
C51 COMPILER V9.00   CALCULATE                                                             12/09/2019 17:56:06 PAGE 4   

 173   1          {
 174   2                      uiCellVmax = uiVadcVmax;
 175   2                      uiCellVmin = uiVadcVmin;
 176   2                      
 177   2              UART_IRQ_DISABLE;
 178   2              Info.ulVoltage = TempPackVol;                                                           //Calculate the total voltage
 179   2              UART_IRQ_ENABLE;
 180   2          }
 181   1      }
 182          
 183          
 184          /*******************************************************************************
 185          Function: GetAFEData(void)
 186          Description:  
 187          Input:          
 188          Output: 
 189          Others:
 190          *******************************************************************************/
 191          bit GetAFEData(void)
 192          {
 193   1              U8  i;
 194   1              BOOL result=1;
 195   1      
 196   1              for(i=ucCellNumOffset; i<(ucCellNum+ucCellNumOffset); i++)
 197   1          {
 198   2                      if(!TWIReadAFE(AFE_CELL1H+2*i, (U8 xdata *)(&AFE.uiCell[i])))   //通过TWI读取VADC采集的电压值()
 199   2              {
 200   3                              result = 0;
 201   3                              return result;
 202   3                      }
 203   2              }
 204   1              if(!TWIReadAFE(AFE_TS1H, (U8 xdata *)&AFE.uiTS1))
 205   1              {
 206   2                      result = 0;
 207   2                      return result;
 208   2              }
 209   1              if(!TWIReadAFE(AFE_TS2H, (U8 xdata *)&AFE.uiTS2))
 210   1              {
 211   2                      result = 0;
 212   2                      return result;
 213   2          }
 214   1      
 215   1              return result;
 216   1      }
 217          
 218          
 219          /*******************************************************************************
 220          Function: BatteryInfoManage(void)
 221          Description: First Calculate Temp1/Temp2/VCell1-VCell10/Current 
 222          Input:
 223          Output:
 224          Others:
 225          *******************************************************************************/
 226          void BatteryInfoManage(void)
 227          {
 228   1              if(GetAFEData())
 229   1              {
 230   2                      CalcuTemperature();
 231   2                      
 232   2                      CalcuVoltage();         
 233   2              }
 234   1      }
C51 COMPILER V9.00   CALCULATE                                                             12/09/2019 17:56:06 PAGE 5   

 235          
 236          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1306    ----
   CONSTANT SIZE    =    322    ----
   XDATA SIZE       =   ----      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
